@namespace MC.Blazor

@using System.Globalization


<McDataPickerStyle />

@*@foreach (var calender in CurCultureInfo.OptionalCalendars)
    {
        @calender.AlgorithmType.ToString();
    }*@
<br />
<div class="mc-datepicker" onmousewheel="" tabindex="0">
    <span>
        <input @bind="Value" @bind:format="@Format" autocomplete="off" type="text" readonly />
        <button class="btn btn-link text-info" @onclick="@ShowCalender" tabindex="-1"><i class="far fa-calendar fa-sm"></i></button>
    </span>
    <div onmousewheel="" class="mc-datepicker-calendar @(datePickerObject.Show?"":"d-none")">
        <div class="group">
            <div class="header">
                <button @onclick="DecYear" class="btn btn-link float-right"><i class="fas fa-angle-double-left"></i></button>
                <button @onclick="DecMonth" class="btn btn-link float-right"><i class="fas fa-chevron-left"></i></button>
                <button @onclick="IncYear" class="btn btn-link float-left"><i class="fas fa-angle-double-right"></i></button>
                <button @onclick="IncMonth" class="btn btn-link float-left"><i class="fas fa-chevron-right"></i></button>
                <div class="text-center">
                    <select @bind-value="datePickerObject.Month" @bind-value:event="oninput" @onchange="ChangeValue" tabindex="-1" class="mc-select">
                        @for (int i = 1; i < datePickerObject.Months.Count(); i++)
                        {
                            <option value="@i">@datePickerObject.Months[i - 1]</option>
                        }
                    </select>
                    <select @bind-value="datePickerObject.Year" @bind-value:event="oninput" @onchange="ChangeValue" tabindex="-1" class="mc-datepicker-calendar-group-header-year">
                        @for (int i = Now.Year - 50; i < Now.Year + 50; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
            </div>
            <div>
                <table class="w-100">
                    <thead>
                        @*Fill day names*@
                        <tr>
                            @for (int i = 0; i < datePickerObject.Days.Count(); i++)
                            {
                                <th scope="col" class="">
                                    <span class="@(datePickerObject.IsHoliday(i) ? "text-danger" : null)">
                                        @datePickerObject.GetDayOfWeek(Value.Year, Value.Month, Value.Day + i)
                                    </span>
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @for (int r = 1; r < 6; r++)
                        {
                            <tr>
                                @for (int c = 1; c < 8; c++)
                                {
                                    if (c * r <= datePickerObject.DaysInMonth)
                                    {
                                        <td class="text-center @(datePickerObject.IsHoliday(c-1) ? "text-danger" : null)">@(c * r)</td>
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    static DateTime Now = DateTime.UtcNow.AddHours(UtcHours);
    McDataPickerObject datePickerObject = new McDataPickerObject();
    [Parameter] public string CultureString { get; set; } = "ar-SY";
    [Parameter] public static int UtcHours { get; set; } = 3;
    [Parameter] public DateTime Value { get; set; } = Now;
    [Parameter] public string Format { get; set; } = "yyyy/MM/dd";
    /// <summary>
    /// Sunday = 0, Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6
    /// </summary>
    [Parameter] public DayOfWeek FirstDayOfWeek { get; set; } = DayOfWeek.Monday;
    [Parameter] public EventCallback<DateTime?> OnChangedEvent { get; set; }

    protected override void OnParametersSet()
    {
        datePickerObject.CurCultureInfo = new CultureInfo(CultureString);
    }

    protected override void OnInitialized()
    {
        datePickerObject.CurCultureInfo = new CultureInfo(CultureString);
        datePickerObject.Months = datePickerObject.CurCultureInfo.DateTimeFormat.MonthNames;

        datePickerObject.Days = datePickerObject.CurCultureInfo.DateTimeFormat.AbbreviatedDayNames;
        for (int i = 0; i < datePickerObject.CurCultureInfo.DateTimeFormat.AbbreviatedDayNames.Count(); i++)
        {
            datePickerObject.Days[i] = datePickerObject.CurCultureInfo.DateTimeFormat.AbbreviatedDayNames[i + (int)FirstDayOfWeek > 6 ? i + (int)FirstDayOfWeek - 7 : i + (int)FirstDayOfWeek];
        }

        datePickerObject.DaysInMonth = datePickerObject.CurCultureInfo.Calendar.GetDaysInMonth(Value.Year, Value.Month);

        ChangeValue();
    }

    void OnChanged(DateTime CurDate)
    {
        Value = CurDate;
    }

    void ShowCalender()
    {
        datePickerObject.Show = !datePickerObject.Show;
        StateHasChanged();
    }

    void ChangeValue()
    {
        datePickerObject.Year = datePickerObject.Year > 0 ? datePickerObject.Year : Value.Year;
        datePickerObject.Month = datePickerObject.Month > 0 ? datePickerObject.Month : Value.Month;
        datePickerObject.Day = datePickerObject.Day > 0 ? datePickerObject.Day : Value.Day;
        Value = new DateTime(datePickerObject.Year, datePickerObject.Month, datePickerObject.Day);
        datePickerObject.CurCultureInfo.DateTimeFormat.FirstDayOfWeek = FirstDayOfWeek;

        var weeks = datePickerObject.CurCultureInfo.Calendar.GetDayOfWeek(Value);

        datePickerObject.DaysInMonth = datePickerObject.CurCultureInfo.Calendar.GetDaysInMonth(datePickerObject.Year, datePickerObject.Month);

        StateHasChanged();
    }

    void DecYear()
    {
        if (datePickerObject.Year > Now.Year - 50) datePickerObject.Year--;
        ChangeValue();
    }

    void IncYear()
    {
        if (datePickerObject.Year < Now.Year + 49) datePickerObject.Year++;
        ChangeValue();
    }

    void DecMonth()
    {
        if (datePickerObject.Month > 1)
            datePickerObject.Month--;
        else if (datePickerObject.Year > Now.Year - 50)
        {
            datePickerObject.Month = 12;
            datePickerObject.Year--;
        }
        ChangeValue();
    }

    void IncMonth()
    {
        if (datePickerObject.Month < 12)
            datePickerObject.Month++;
        else if (datePickerObject.Year < Now.Year + 49)
        {
            datePickerObject.Month = 1;
            datePickerObject.Year++;
        }
        ChangeValue();
    }

    public class McDataPickerObject
    {
        public bool Show = false;
        public string[] Months;
        public string[] Days;
        public int Year = Now.Year;
        public int Month = Now.Month;
        public int Day = Now.Day;
        public int DaysInMonth;
        public int DayName;
        public Dictionary<int, string> MonthDays = new Dictionary<int, string>();
        public CultureInfo CurCultureInfo { get; set; }

        public DayOfWeek GetDayOfWeek(int year, int month, int day) => new DateTime(year, month, day).DayOfWeek;
        public bool IsHoliday(int i) => Days[i] == CurCultureInfo.DateTimeFormat.AbbreviatedDayNames[6] || Days[i] == CurCultureInfo.DateTimeFormat.AbbreviatedDayNames[0];
    }
}
