<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center" style="margin-block-end: 0;margin-block-start: 0;">
        @foreach (var link in links)
        {
            <li @onclick="@(()=>SelectedPageInternal(link))" title="@link.Title" style="@(link.Enabled ? "cursor:pointer;" : null)" class="page-item @(link.Enabled ? null : "disabled") @(link.Active? "active" : null)">
                <span class="page-link">@link.Text</span>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPageQuantity { get; set; }
    [Parameter] public int Radius { get; set; } = 3;
    [Parameter] public EventCallback<int> SelectedPage { get; set; }
    List<LinkModel> links;

    protected override void OnParametersSet()
    {
        LoadPages();
    }

    private async Task SelectedPageInternal(LinkModel link)
    {
        if (link.Page == CurrentPage || !link.Enabled) return;

        CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }

    private void LoadPages()
    {
        links = new List<LinkModel>();

        var isFirstPageLinkEnabled = CurrentPage != 1;
        links.Add(new LinkModel(1, isFirstPageLinkEnabled, "<<", "الأول"));

        var isPreviousPageLinkEnabled = CurrentPage != 1;
        var PreviousPage = CurrentPage - 1;
        links.Add(new LinkModel(PreviousPage, isPreviousPageLinkEnabled, "<", "السابق"));

        if (CurrentPage - Radius > 1 && TotalPageQuantity > Radius)
            links.Add(new LinkModel(0, false, "..."));

        for (int i = 1; i <= TotalPageQuantity; i++)
            if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
                links.Add(new LinkModel(i) { Active = CurrentPage == i });

        if (CurrentPage < Radius && TotalPageQuantity > Radius + 1)
            links.Add(new LinkModel(0, false, "..."));

        var isNextPageLinkEnabled = CurrentPage != TotalPageQuantity;
        var NextPage = CurrentPage + 1;
        links.Add(new LinkModel(NextPage, isNextPageLinkEnabled, ">", "التالي"));

        var isLastPageLinkEnabled = CurrentPage != TotalPageQuantity;
        links.Add(new LinkModel(TotalPageQuantity, isLastPageLinkEnabled, ">>", "الأخير"));
    }

    class LinkModel
    {
        public LinkModel(int page) : this(page, true) { }
        public LinkModel(int page, bool enabled) : this(page, true, page.ToString()) { }
        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public LinkModel(int page, bool enabled, string text, string title)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
            Title = title;
        }

        public string Text { get; set; }
        public string Title { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;
    }
}
