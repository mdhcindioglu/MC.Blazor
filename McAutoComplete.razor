<div class="position-relative">
    <input class="form-control" @bind-value="Item.Text" @bind-value:event="oninput" style="padding-left: 32px;"
           @onkeyup="OnTextChangedVoid"
           @onfocusout="@(async() => { await Task.Delay(200); Items = new List<McAutoCompleteObject>(); })"
           readonly="@ItemSelected" />
    <button type="button" class="btn btn-link text-danger btn-sm position-absolute @(ItemSelected ? null : "d-none")" title="حذف"
            @onclick="@OnClearSearchVoid" style="top: 4px; left: 5px; padding: 5px;">
        <i class="fas fa-times-circle"></i>
    </button>
    @if (Items?.Count > 0)
    {
        <ul class="mc-autocomplete-list">
            @foreach (var item in Items)
            {
                <li class="mc-autocomplete-item" @onclick="@(() => OnSelectedValue(item))">@item.Text</li>
            }
        </ul>
    }
</div>
@code {
    bool ItemSelected = false;
    [CascadingParameter(Name = "Items")] public List<McAutoCompleteObject> Items { get; set; }
    [Parameter] public McAutoCompleteObject Item { get; set; } = new McAutoCompleteObject();
    [Parameter] public EventCallback<string> OnTextChanged { get; set; }
    [Parameter] public EventCallback OnClearSearch { get; set; }
    [Parameter] public EventCallback<McAutoCompleteObject> OnItemSelected { get; set; }

    protected override void OnParametersSet()
    {
        ItemSelected = Item != null & !string.IsNullOrEmpty(Item.Id);
    }

    async Task OnTextChangedVoid()
    {
        if (!string.IsNullOrEmpty(Item.Text))
        {
            await OnTextChanged.InvokeAsync(Item.Text);
        }
    }

    async Task OnSelectedValue(McAutoCompleteObject selectedValue)
    {
        Item = selectedValue;
        ItemSelected = true;
        await OnItemSelected.InvokeAsync(Item);
    }

    async Task OnClearSearchVoid()
    {
        Item = new McAutoCompleteObject();
        Items = new List<McAutoCompleteObject>();
        await OnClearSearch.InvokeAsync(Item.Text);
    }
}
